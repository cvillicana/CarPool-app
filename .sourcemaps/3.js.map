{"version":3,"sources":["../../src/pages/start-trip/start-trip.module.ts","../../src/pages/start-trip/start-trip.ts"],"names":[],"mappings":"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","file":"3.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { StartTripPage } from './start-trip';\n\n@NgModule({\n  declarations: [\n    StartTripPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(StartTripPage),\n  ],\n})\nexport class StartTripPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/start-trip/start-trip.module.ts","import { Component, ViewChild, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { IonicPage, NavController, ViewController } from 'ionic-angular';\n\ndeclare var google: any;\n\n@IonicPage()\n@Component({\n  selector: 'page-start-trip',\n  templateUrl: 'start-trip.html',\n})\nexport class StartTripPage implements OnInit{\n\n  @ViewChild('startTripSlider') startTripSlider: any;\n\n  public slideOneForm: FormGroup;\n  public slideTwoForm: FormGroup;\n  public preButtonText: string = \"Back\";\n  public submitAttemp: boolean = false;\n\n  public autocompleteItems : any;\n  public autocomplete: any;\n  public acService: any;\n  public placeService: any;\n\n  constructor(\n    public navCtrl: NavController,\n    public FormBuilder: FormBuilder,\n    public viewCtrl: ViewController) {}\n\n  ngOnInit(){\n    this.acService = new google.maps.places.AutocompleteService();\n    this.autocompleteItems = [];\n    this.autocomplete = {\n      query: ''\n    };\n  }\n\n  public dismissSearch(){\n    this.viewCtrl.dismiss();\n  }\n\n  public chooseItem(item: any){\n    this.viewCtrl.dismiss(item);\n  }\n\n  public updateGoogleSearch(){\n    console.log('modal > updateSearch');\n    if (this.autocomplete.query == '') {\n      this.autocompleteItems = [];\n      return;\n    }\n    let self = this;\n    let config = {\n      types:  ['geocode'], // other types available in the API: 'establishment', 'regions', and 'cities'\n      input: this.autocomplete.query,\n      componentRestrictions: { country: 'AR' }\n    }\n    this.acService.getPlacePredictions(config, function (predictions, status) {\n      console.log('modal > getPlacePredictions > status > ', status);\n      self.autocompleteItems = [];\n      predictions.forEach(function (prediction) {\n        self.autocompleteItems.push(prediction);\n      });\n    });\n  }\n\n  public next(){\n    this.preButtonText = \"Prev\";\n    this.startTripSlider.slideNext();\n  }\n\n  public prev(){\n    this.preButtonText = this.startTripSlider.getActiveIndex() === 1 ? \"Back\" : \"Prev\";\n    if(!this.startTripSlider._isBeginning){\n      this.startTripSlider.slidePrev();\n    }else{\n      this.navCtrl.pop();\n    }\n  }\n\n  public save(){\n\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/start-trip/start-trip.ts"],"sourceRoot":""}